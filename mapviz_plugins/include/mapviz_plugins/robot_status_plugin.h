#ifndef MAPVIZ_PLUGINS_ROBOT_STATUS_PLUGIN_H_
#define MAPVIZ_PLUGINS_ROBOT_STATUS_PLUGIN_H_

// Include mapviz_plugin.h first to ensure GL deps are included in the right order
#include <mapviz/mapviz_plugin.h>

// C++ standard libraries
#include <string>
#include <list>
#include <vector>

// QT libraries
#include <QColor>
#include <QGLWidget>
#include <QObject>
#include <QWidget>

// ROS libraries
#include <ros/ros.h>
#include <ros/master.h>
#include <ros/package.h>

#include <mapviz/map_canvas.h>
#include <mapviz_plugins/placeable_window_proxy.h>

// QT autogenerated files
#include "ui_robot_status_config.h"

namespace mapviz_plugins
{
class RobotStatusPlugin : public mapviz::MapvizPlugin
{
  Q_OBJECT

 public:
  RobotStatusPlugin();
  virtual ~RobotStatusPlugin();

  bool Initialize(QGLWidget* canvas);
  void Shutdown();

  void Draw(double x, double y, double scale);
  void Transform() {}

  void LoadConfig(const YAML::Node& node, const std::string& path);
  void SaveConfig(YAML::Emitter& emitter, const std::string& path);

  QWidget* GetConfigWidget(QWidget* parent);

 protected:
  void PrintError(const std::string& message);
  void PrintInfo(const std::string& message);
  void PrintWarning(const std::string& message);

 private:
  void RobotStatusCallback(const std_msgs::EmptyConstPtr& msg);

  void timerEvent(QTimerEvent *);
  void LoadImage();

  QWidget* config_widget_;
  ros::Subscriber heartbeat_subscriber_;
  ros::Publisher heartbeat_publisher_;

  int heartbeat_counter_, listener_counter_;
  std::string filename_;
  QImage image_;
  int texture_id_;
  int dimension_;
  bool texture_loaded_;

  Ui::robot_status_config ui_;
};  // class RobotStatusPlugin
}  // namespace mapviz_plugins
#endif  // MAPVIZ_PLUGINS_ROBOT_STATUS_PLUGIN_H_
