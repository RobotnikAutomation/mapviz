#ifndef MAPVIZ_PLUGINS_AUTOPILOT_WAYPOINTS_PLUGIN_H_
#define MAPVIZ_PLUGINS_AUTOPILOT_WAYPOINTS_PLUGIN_H_

// C++ standard libraries
#include <string>
#include <list>

#include <mapviz/mapviz_plugin.h>

// QT libraries
#include <QGLWidget>
#include <QObject>
#include <QWidget>

// ROS libraries
#include <ros/ros.h>
#include <tf/transform_datatypes.h>
#include <actionlib/client/simple_action_client.h>
#include <autopilot_msgs/GPSGoalAction.h>
#include <autopilot_msgs/AutopilotGeoPath.h>
#include <autopilot_msgs/AutopilotGeoPoseStamped.h>
#include <autopilot_msgs/ModifyGPSWaypoint.h>
#include <autopilot_msgs/AddGPSWaypoint.h>

#include <mapviz/map_canvas.h>
#include <mapviz_plugins/point_drawing_plugin.h>

// QT autogenerated files
#include "ui_autopilot_waypoints_config.h"

namespace mapviz_plugins
{
  class AutopilotWaypointsPlugin : public mapviz::MapvizPlugin
  {
    Q_OBJECT

   public:
    AutopilotWaypointsPlugin();
    virtual ~AutopilotWaypointsPlugin();

    bool Initialize(QGLWidget* canvas);
    void Shutdown()
    {
    }

    void Paint(QPainter* painter, double x, double y, double scale);
    void Draw(double x, double y, double scale);
    void Transform() { };

    void LoadConfig(const YAML::Node& node, const std::string& path);
    void SaveConfig(YAML::Emitter& emitter, const std::string& path);

    QWidget* GetConfigWidget(QWidget* parent);

    void PrintError(const std::string& message);
    void PrintInfo(const std::string& message);
    void PrintWarning(const std::string& message);

    bool SupportsPainting()
    {
      return true;
    }

    protected:
    bool eventFilter(QObject* object, QEvent* event);
    bool handleMousePress(QMouseEvent*);
    bool handleMouseRelease(QMouseEvent*);
    bool handleMouseMove(QMouseEvent*);
    void waypointsCallback(const autopilot_msgs::AutopilotGeoPathConstPtr& waypoints);

    protected Q_SLOTS:
    void Clear();
    void SelectTopic();
    void TopicEdited();
    void AlphaChanged(double) { };
    void Cancel();
    void SendGoal();
    void AddPoint();
    void RemovePoint();

    private:
    // void goalCallback(const geographic_msgs::GeoPoint& msg);

    Ui::autopilot_waypoints_config ui_;
    QWidget* config_widget_;

    mapviz::MapCanvas* map_canvas_;
    tf::Vector3 last_position_;
    ros::Subscriber waypoints_sub_;
    // ros::Subscriber goal_sub_;
    ros::Publisher accept_mission_pub_;
    ros::Publisher cancel_pub_;
    ros::ServiceClient modify_waypoints_client_;
    ros::ServiceClient add_waypoint_client_;

    boost::scoped_ptr<actionlib::SimpleActionClient<autopilot_msgs::GPSGoalAction>> gps_goal_ac_;

    std::vector<tf::Vector3> vertices_;
    std::vector<tf::Vector3> transformed_vertices_;

    int selected_point_;
    int index_;
    std::string topic_;
    std::string gps_goal_namespace_;
    geographic_msgs::GeoPoint new_coords_;
    std::vector<autopilot_msgs::AutopilotGeoPoseStamped> waypoints_array_;
    bool has_message_;
    bool is_mouse_down_, add_point_flag_, remove_point_flag_, is_point_to_remove_;
    QPalette p_addpoint_, p_remove_;
    QPointF mouse_down_pos_;
    qint64 mouse_down_time_;

    qint64 max_ms_;
    qreal max_distance_;
    };

    }

    #endif // MAPVIZ_PLUGINS_MEASURING_PLUGIN_H_
