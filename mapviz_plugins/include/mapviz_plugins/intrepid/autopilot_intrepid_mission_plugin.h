#ifndef MAPVIZ_PLUGINS_AUTOPILOT_INTREPID_MISSION_PLUGIN_H_
#define MAPVIZ_PLUGINS_AUTOPILOT_INTREPID_MISSION_PLUGIN_H_

#include <mapviz/mapviz_plugin.h>

// ROS libraries
#include <ros/ros.h>
#include <std_msgs/Empty.h>
#include <std_msgs/String.h>
#include <std_msgs/Bool.h>
#include <nav_msgs/Path.h>

// Mapviz libraries
#include <mapviz/map_canvas.h>
//
// QT autogenerated files
#include "ui_autopilot_intrepid_mission_config.h"

namespace mapviz_plugins
{
  class AutopilotIntrepidMissionPlugin : public mapviz::MapvizPlugin
  {
    Q_OBJECT

   public:
    AutopilotIntrepidMissionPlugin();
    virtual ~AutopilotIntrepidMissionPlugin();

    bool Initialize(QGLWidget* canvas);
    void Shutdown()
    {
    }

    void Draw(double x, double y, double scale);
    void Transform() { };

    void LoadConfig(const YAML::Node& node, const std::string& path);
    void SaveConfig(YAML::Emitter& emitter, const std::string& path);

    QWidget* GetConfigWidget(QWidget* parent);

    void PrintError(const std::string& message);
    void PrintInfo(const std::string& message);
    void PrintWarning(const std::string& message);

    bool SupportsPainting()
    {
      return true;
    }

    protected Q_SLOTS:
    void MissionCommandRequestCB(const std_msgs::String &msg);
    void AcceptCommand();
    void flashingGoTo(const ros::TimerEvent& event);
    void flashingScanArea(const ros::TimerEvent& event);
    void flashingPickUp(const ros::TimerEvent& event);
    void flashingPutDown(const ros::TimerEvent& event);

    private:
    Ui::autopilot_intrepid_mission_config ui_;
    QWidget* config_widget_;
    QPalette p_text_;
    mapviz::MapCanvas* map_canvas_;

    ros::Timer goto_timer_, scan_area_timer_, pick_up_timer_, put_down_timer_;

    ros::Publisher accept_command_pub_;
    ros::Subscriber mission_command_request_sub_;

    bool goto_flashing_ = false, scan_area_flashing_ = false, pick_up_flashing_ = false, put_down_flashing_ = false;
    };

    }

    #endif // MAPVIZ_PLUGINS_AUTOPILOT_INTREPID_MISSION_PLUGIN_H_
